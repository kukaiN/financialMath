{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run this first line to load requirements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "from IPython.display import display, Math, Latex\n",
    "\n",
    "def calculate_V0(prices, quantity):\n",
    "    \"\"\"returns the V0 value hiven the price and the associated quantity\"\"\"\n",
    "    return sum([p*q for (p, q) in zip(prices, quantity)])\n",
    "\n",
    "def calculate_VT(prices, quantity):\n",
    "    return sum([p*q for (p, q) in zip(prices, quantity)])\n",
    "    \n",
    "def discreteRate(rate, time, principal=1):\n",
    "    return principal* ((r*time)+1)\n",
    "\n",
    "def findUnknownRate(time, principal=1, finalValue=1):\n",
    "    \"\"\"solving the equation finalValue = principal* (1+ r*time)\"\"\"\n",
    "    print(\"modified the equation Vt= V0*(1+r*t) to be ((VT-V0)/V0) / t = r\")\n",
    "    return ROI(principal, finalValue) / time\n",
    "\n",
    "def ROI(V0, VT):\n",
    "    return (VT-V0)/V0\n",
    "\n",
    "def  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# HW1 question 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "V(0) is equal to 1600\n",
      "V(T) equals the following:\n"
     ]
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle X(m,n)=\n",
       "\\begin{cases}\n",
       "x(n),\\\\\n",
       "x(n-1)\\\\\n",
       "x(n-1)\n",
       "\\end{cases}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# this is a bond\n",
    "A0 = 90\n",
    "AT = 100\n",
    "y = 15\n",
    "\n",
    "# this is for a stock/ risky security\n",
    "S0 = 25\n",
    "Scenarios = [\"p\", \"1-p\"]\n",
    "ST = [30, 20]\n",
    "x = 10\n",
    "\n",
    "\n",
    "V0 = calculate_V0([A0, S0], [y, x])\n",
    "VTcase1 = calculate_VT([AT, ST[0][1]], [y, x])\n",
    "VTcase2 = calculate_VT([AT, ST[1][1]], [y, x])\n",
    "Kcase1 = ROI(V0, VTcase1)\n",
    "Kcase2 = ROI(V0, VTcase2)\n",
    "\n",
    "VT_df = pd.DataFrame()\n",
    "\n",
    "print(\"V(0) is equal to\", V0)\n",
    "print(\"V(T) equals the following:\")\n",
    "\n",
    "\n",
    "text = \"\"\"X(m,n)=\n",
    "\\begin{cases}\n",
    "{},\\\\\n",
    "{}\\\\\n",
    "\\end{cases}\"\"\".format(ST[0][0], ST[1][0], )\n",
    "\n",
    "display(Math(r))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HW 1 Problem 3:\n",
    "A sum of \\\\$5000(principal) paid into a bank account for 3 months (90 days) (time) to attract simple interest will\n",
    "produce \\\\$5050 (finalPrice) at the end of the term. Find the interest rate r and the return on this investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the return on investment is  0.01\n",
      "modified the equation to be ((VT-V0)/V0)/ time = r\n",
      "plugging in values, the intrest rate, r, is equal to 0.04055555555555556\n"
     ]
    }
   ],
   "source": [
    "principal = 5000\n",
    "finalPrice = 5050\n",
    "time = 90/365\n",
    "\n",
    "roi = ROI(principal, finalPrice)\n",
    "print(\"the return on investment is \", roi)\n",
    "r = findUnknownRate(time, principal, finalPrice)\n",
    "print(\"plugging in values, the intrest rate, r, is equal to\", r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
